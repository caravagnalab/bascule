[{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https:://caravagnalab.github.io/bascule/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"bascule-framework","dir":"Articles","previous_headings":"","what":"BASCULE framework","title":"Inference with BASCULE","text":"BASCULE framework two Bayesian models perform signatures deconvolution subsequent exposures clustering. Bayesian NMF model used deonvolve signatures type (SBS, DBS, ID, etc.). inferred exposures, .e., type signature deconvolution executed, clustered Bayesian Dirichlet Process mixture model, group patients based signatures activities related mutational processed. addition , developed two heuristics improve extracted de novo signatures identified clusters. recommended workflow BASCULE represented schematic way following figure explained details article.","code":""},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"load-package","dir":"Articles","previous_headings":"BASCULE framework","what":"Load package","title":"Inference with BASCULE","text":"first required step load bascule. bascule Bayesian models implemented Python using Pyro probabilistic programming language thus require working Python programme pybasilica package. recommend reading Get Started article correctly install Python package.","code":"library(bascule) knitr::opts_chunk$set(warning = FALSE, message = FALSE) reticulate::install_python(version=\"3.9.16\") reticulate::py_install(packages=\"pybascule\",                         pip=TRUE,                        python_version=\"3.9.16\") py = reticulate::import(\"pybascule\")"},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"load-the-dataset","dir":"Articles","previous_headings":"BASCULE framework","what":"Load the dataset","title":"Inference with BASCULE","text":"can load data example_dataset, BASCULE object containing true signatures exposures used generate mutation counts matrix. object, data SBS DBS reported. can extract mutation count matrix object using get_input function. reconstructed=FALSE obtaining observed counts, reconstructed ones computed matrix multiplication exposures signatures. use reference COSMIC catalogue SBS DBS. example dataset, true number signatures (reference plus de novo) 5 SBS DBS, thus can provide list K de novo signatures test values 0 7.","code":"data(\"synthetic_data\") counts = synthetic_data$counts head(counts[[\"SBS\"]][, 1:5]) #>      A[C>A]A A[C>A]C A[C>A]G A[C>A]T A[C>G]A #> G1_1     118       7       0      52      10 #> G1_2     236      21       5     107      17 #> G1_3     132       8       1      50      11 #> G1_4     116      15       3      40      10 #> G1_5     149      12       3      56      10 #> G1_6     161      10       2      66      13 head(counts[[\"DBS\"]][, 1:5]) #>      AC>CA AC>CG AC>CT AC>GA AC>GG #> G1_1     5     1     4     8     4 #> G1_2     4     1     6     4     3 #> G1_3     5     0     4     6     1 #> G1_4     2     0     0     2     0 #> G1_5     4     0     4     3     0 #> G1_6     0     0     3     1     0 reference_cat = list(\"SBS\"=COSMIC_sbs_filt, \"DBS\"=COSMIC_dbs) head(reference_cat[[\"SBS\"]][1:5, 1:5]) #>         A[C>A]A     A[C>A]C    A[C>A]G     A[C>A]T     A[C>G]A #> SBS1 0.00000000 0.000000000 0.00000000 0.000000000 0.000000000 #> SBS2 0.00000000 0.000000000 0.00000000 0.000000000 0.000000000 #> SBS3 0.02080832 0.016506603 0.00175070 0.012204882 0.019707883 #> SBS4 0.04219650 0.033297236 0.01559870 0.029497552 0.006889428 #> SBS5 0.01199760 0.009438112 0.00184963 0.006608678 0.010097980 k_list = 0:7"},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"fit-the-model","dir":"Articles","previous_headings":"BASCULE framework","what":"Fit the model","title":"Inference with BASCULE","text":"Now, can fit model. Let’s first fit NMF perform signatures deconvolution.","code":"x = fit(counts=counts, k_list=k_list, n_steps=3000,         reference_cat=reference_cat,         keep_sigs=c(\"SBS1\",\"SBS5\"), # force fixed signatures         store_fits=TRUE,          py=py)"},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"visualize-the-inference-scores","dir":"Articles","previous_headings":"BASCULE framework > Fit the model","what":"Visualize the inference scores","title":"Inference with BASCULE","text":"can inspect model selection procedure. plot shows tested value K (.e., number de novo signatures), value BIC likelihood respective model. implementation, model lowest BIC considered best model.  Another variable interest evolution iterations norms gradients inferred parameter. good result, shown , norms decreases inference, reporting increased stability.","code":"plot_scores(x) plot_gradient_norms(x)"},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"visualize-the-inferred-parameters","dir":"Articles","previous_headings":"BASCULE framework > Fit the model","what":"Visualize the inferred parameters","title":"Inference with BASCULE","text":"can visualize inferred signatures. , notice 41 20 SBS DBS signatures, model selects 6 5 signatures catalogue. Moreover, also infers denovo signature SBS counts.","code":"plot_signatures(x)"},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"post-fit-heuristics-and-clustering","dir":"Articles","previous_headings":"BASCULE framework","what":"Post fit heuristics and clustering","title":"Inference with BASCULE","text":"can notice signatures plots clear similarity signature SBSD1 SBS31. can compute linear combination de novo signatures remove similar reference ones. refined set signatures can run model perform clustering samples based exposures. , BASCULE identifies 3 clusters. last optional recommended step, run function merge_clusters(). function two inputs, BASCULE object x cosine similarity cutoff cutoff, specifies minimum cosine similarity cluster centroids required merging. default value cosine similarity cutoff 0.8. case, clusters merged, fact new object 3 clusters.","code":"x_refined = refine_denovo_signatures(x) x_refined_cluster = fit_clustering(x_refined, cluster=3) x_refined_cluster = merge_clusters(x_refined_cluster)"},{"path":[]},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"mutational-signatures","dir":"Articles","previous_headings":"BASCULE framework > Visualisation of the results","what":"Mutational signatures","title":"Inference with BASCULE","text":"post-fit de novo signatures refinement discarded signature SBSD1, since showed high similarity reference signature SBS31.","code":"plot_signatures(x_refined_cluster)"},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"exposures-matrix","dir":"Articles","previous_headings":"BASCULE framework > Visualisation of the results","what":"Exposures matrix","title":"Inference with BASCULE","text":"can visualise exposures patient divided final group assignment. case, BASCULE retrieved 3 groups. cluster characterised set SBS DBS. instance, group G0 largest one characterised signatures DBS1, DBS11 DBS3, SBS1, SBS5 SBS31.","code":"plot_exposures(x_refined_cluster)"},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"clustering-centroids","dir":"Articles","previous_headings":"BASCULE framework > Visualisation of the results","what":"Clustering centroids","title":"Inference with BASCULE","text":"can also inspect inferred clustering centroids, reporting cluster average group-specific signatures exposures.","code":"plot_centroids(x_refined_cluster)"},{"path":"https:://caravagnalab.github.io/bascule/articles/1.Inference.html","id":"posterior-probabilities","dir":"Articles","previous_headings":"BASCULE framework > Visualisation of the results","what":"Posterior probabilities","title":"Inference with BASCULE","text":"can finally visualise posterior probabilities sample’s assignment. row (samples) heatmap sums 1 reports posterior probabilities sample assigned cluster (columns).","code":"plot_posterior_probs(x_refined_cluster)"},{"path":"https:://caravagnalab.github.io/bascule/articles/2.Fit_breast_data.html","id":"package-setup","dir":"Articles","previous_headings":"","what":"Package setup","title":"Real data analysis on a breast cancer cohort","text":"detailed explanation, please visit package setup.","code":"library(bascule) #> ✔ Loading bascule. Support : <https://caravagnalab.github.io/bascule/> knitr::opts_chunk$set(warning=FALSE, message=FALSE) configure_environment(envname=\"bascule-env\", use_default=TRUE) py = reticulate::import(\"pybascule\")"},{"path":"https:://caravagnalab.github.io/bascule/articles/2.Fit_breast_data.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Real data analysis on a breast cancer cohort","text":"want analyze 2,682 breast tumour samples GEL, ICGC, HMF cohorts. purpose load breast tumor type data object breast_data (details visit ) bascule package, retrieve input data (counts) . counts object list contains two SBS DBS matrices (data.frame), 2682 rows (representing samples), 96 columns SBS context 78 columns DBS context (representing mutational contexts). values matrices number mutations corresponding sample mutational context. counts matrix can extracted bascule fit object using get_input function package. reference catalogue breast cancer, selected signatures SBS1, SBS2, SBS3, SBS5, SBS13, SBS17, SBS18, SBS31, SBS context signatures DBS11, DBS13, DBS20, DBS context. signature collections subset COSMIC_sbs_filt COSMIC_dbs catalogues. Based prior biological knowledge expect see SBS3 one signatures included matrices, practice, SBS3 signature present output model. give higher weights SBS3 using hyperparameters arguments (visit information), keep signature final output.","code":"# load breast fit data from package data(\"breast_data\")  # extract the bascule fit object for breast tumor type x = breast_data$x  x #> ── [ Bascule ]   samples with 0 total mutations. ─────────────────────────────── #>  #> ── SBS catalogue signatures (5 columns shown max) #>            A[C>A]A     A[C>A]C     A[C>A]G     A[C>A]T     A[C>G]A #>  SBS1  0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  SBS2  0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  SBS3  0.020808323 0.016506603 0.001750700 0.012204882 0.019707883 #>  SBS5  0.011997600 0.009438112 0.001849630 0.006608678 0.010097980 #>  SBS13 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #>  SBS18 0.051533859 0.015810387 0.002431598 0.021414070 0.001731137 #>  SBS31 0.009534985 0.018490274 0.001659127 0.006276698 0.008315626 #>  #> ── De novo signatures (5 columns shown max) #>              A[C>A]A     A[C>A]C      A[C>A]G     A[C>A]T      A[C>G]A #>  SBSD1  0.0013021588 0.001086904 0.0010003703 0.001298402 0.0009850989 #>  SBSD2  0.0086599355 0.003850128 0.0019153069 0.007406929 0.0097875630 #>  SBSD4  0.0071512359 0.005733336 0.0339316145 0.004755269 0.0046120340 #>  SBSD5  0.0027345754 0.002193904 0.0007122308 0.002187520 0.0017807318 #>  SBSD6  0.0021000142 0.001562314 0.0009072816 0.001607518 0.0012848607 #>  SBSD7  0.0225498791 0.017800982 0.0031354088 0.006062250 0.0009157615 #>  SBSD8  0.0008454395 0.000797856 0.0004881849 0.001464493 0.0012844335 #>  SBSD9  0.0010254879 0.001912371 0.0003545345 0.004855627 0.0018162442 #>  SBSD10 0.0035070582 0.002635648 0.0003777245 0.002224826 0.0006770983 #>  SBSD11 0.0369320129 0.039624678 0.0067355421 0.053949864 0.0037204620 #>  SBSD12 0.0012540791 0.001046035 0.0008772321 0.001602001 0.0031040453 #>  #> ── DBS catalogue signatures (5 columns shown max) #>              AC>CA       AC>CG       AC>CT       AC>GA       AC>GG #>  DBS11 0.001369907 0.000193987 0.000755948 0.000441970 0.002249847 #>  DBS13 0.002155121 0.000051500 0.002853398 0.002762299 0.001464314 #>  DBS20 0.005031140 0.001909180 0.002372220 0.001585940 0.002634990 #>  #> ── De novo signatures (5 columns shown max) #>             AC>CA       AC>CG       AC>CT       AC>GA       AC>GG #>  DBSD1 0.02705068 0.002431567 0.009581317 0.004772051 0.003079476 #>  DBSD2 0.01119519 0.001638339 0.005947791 0.012590619 0.001679650 # retrieve the input data of the breast tumor type counts = get_input(x, matrix=TRUE, reconstructed=FALSE)  # dimensions of SBS and DBS count matrices dim(counts[[\"SBS\"]]) #> [1] 2682   96 dim(counts[[\"DBS\"]]) #> [1] 2682   78  # display first 5 rows and first 5 columns of SBS and DBS matrices head(counts[[\"SBS\"]][1:5, 1:5]) #>                A[C>A]A A[C>A]C A[C>A]G A[C>A]T A[C>G]A #> GEL-2474917-11     131      81      11      70      71 #> GEL-2516072-11     279     199      32     202      68 #> GEL-2905314-11      54      54      11      38      20 #> GEL-2464811-11      48      36       5      35      17 #> GEL-2142020-11      33      18       7      16       8 head(counts[[\"DBS\"]][1:5, 1:5]) #>                AC>CA AC>CG AC>CT AC>GA AC>GG #> GEL-2474917-11     0     0     0     0     0 #> GEL-2516072-11     1     0     0     1     0 #> GEL-2905314-11     0     0     0     0     0 #> GEL-2464811-11     0     0     0     1     0 #> GEL-2142020-11     0     0     0     0     0 reference_cat = list(   \"SBS\" = COSMIC_sbs_filt[c(\"SBS1\", \"SBS2\", \"SBS3\", \"SBS5\", \"SBS13\", \"SBS17b\", \"SBS18\", \"SBS31\"), ],    \"DBS\" = COSMIC_dbs[c(\"DBS11\", \"DBS13\", \"DBS2\"), ] )  alpha_conc = list(\"SBS3\"=100)"},{"path":"https:://caravagnalab.github.io/bascule/articles/2.Fit_breast_data.html","id":"fit-the-model","dir":"Articles","previous_headings":"","what":"Fit the model","title":"Real data analysis on a breast cancer cohort","text":"run model executing fit function bascule package performs non-negative matrix factorization deconvolute counts matrix lower rank matrices. fit. analysis identified 19 SBS (12 de novo) 5 DBS (2 de novo) signatures. aim eliminate inferred de novo signatures can represented linear combination signatures. done using refine_denovo_signatures function, applied bascule object. refinement step, one de novo signature SBS context removed due explainability signatures. identified 18 SBS (11 de novo) 5 DBS (2 de novo) signatures refinement. use fit_clustering function bascule package bascule object generated refinement step. proceeded merging step tool detected 14 clusters among breast cancer samples. saw re-clustering step, tool detected 14 clusters among breast cancer samples. applied iterative merging function, resulting 5 clusters, using cutoff value 0.8. Later, help convert_dn_names function map de novo signatures known signatures COSMIC catalogue findings Degasperi et al. within SBS context, 6 de novo signatures corresponded COSMIC signatures SBS7a, SBS17b, SBS26, SBS40a, SBS90, SBS98. Additionally, one de novo signature aligned common signature SBS8, two signatures matched rare signatures SBS44 SBS97, Degasperi et al. study. DBS context, mapped two de novo signatures COSMIC signatures DBS14 DBS20.","code":""},{"path":"https:://caravagnalab.github.io/bascule/articles/2.Fit_breast_data.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Real data analysis on a breast cancer cohort","text":"bascule object obtained previous steps ready visualization step. visualization functions take bascule object input.","code":""},{"path":"https:://caravagnalab.github.io/bascule/articles/2.Fit_breast_data.html","id":"fitting-scores","dir":"Articles","previous_headings":"Visualization","what":"Fitting scores","title":"Real data analysis on a breast cancer cohort","text":"plot_scores visualize model selection steps. plot display BIC likelihood scores NMF run k value (number de novo signatures) SBS DBS context. plot, x axis related k values y axis related scores (BIC Likelihood). model selects k value lowest BIC score iterative inference process.  Based BIC score, model 11 de novo signatures SBS 2 de novo signatures DBS provides best fit compared models.","code":"plot_scores(x)"},{"path":"https:://caravagnalab.github.io/bascule/articles/2.Fit_breast_data.html","id":"mutational-signatures","dir":"Articles","previous_headings":"Visualization","what":"Mutational signatures","title":"Real data analysis on a breast cancer cohort","text":"utilize plot_signatures function visualize mutational signatures inferred model. types signames arguments allow us specify context type list signatures plot. get_denovo_signames function used obtain list de novo signature names. plot consist multiple signatures plot name right hand side.  plot shows 11 de novo signatures inferred tool SBS context. x axis shows 96 possible SBS contexts y axis declare respective density.  plot shows 2 de novo signatures inferred tool DBS context. x axis shows 78 possible DBS contexts y axis declare respective density.","code":"plot_signatures(x, types=\"SBS\", signames=get_denovo_signames(x)) plot_signatures(x, types=\"DBS\", signames=get_denovo_signames(x))"},{"path":"https:://caravagnalab.github.io/bascule/articles/2.Fit_breast_data.html","id":"similarity-plot","dir":"Articles","previous_headings":"Visualization","what":"Similarity plot","title":"Real data analysis on a breast cancer cohort","text":"Function plot_similarity_reference plots similarity de novo COSMIC signatures based cosine similarity values.  heatmap plot inspects similarities de novo COSMIC signatures. rows de novo signatures, columns COSMIC signatures values cosine similarity corresponding signatures.","code":"plot_similarity_reference(x)[[1]] #> list() #> attr(,\"class\") #> [1] \"waiver\""},{"path":"https:://caravagnalab.github.io/bascule/articles/2.Fit_breast_data.html","id":"clusters-centroids","dir":"Articles","previous_headings":"Visualization","what":"Clusters centroids","title":"Real data analysis on a breast cancer cohort","text":"plot_centroids() function used plot clustering centroids. , visualize clustering centroids mutational signatures clusters. plot provides clear representation mutational signatures grouped based similarities. plot_centroids function used generate visualization, offering insight relationships distances different mutational signatures. examining plot, can better understand patterns structure signature clustering results.  can inspect centroids cluster two SBS DBS context. x axis defines clusters, y axis defines density signatures colors represent signatures present clusters. Using centroids can analyze patients clustering outcome. detailed information can follow exposure plots cluster find clustering logic possible etiology behind .","code":"plot_centroids(x)"},{"path":"https:://caravagnalab.github.io/bascule/articles/2.Fit_breast_data.html","id":"exposures-matrix","dir":"Articles","previous_headings":"Visualization","what":"Exposures matrix","title":"Real data analysis on a breast cancer cohort","text":"plot_exposures function used visualize inferred exposure matrix, x axis represent samples, y axis represents mutational signatures relative contributions colors identify mutational signatures. exposure matrix displays contribution mutational signature across different samples. plot provides clear overview different mutational signatures contribute overall mutational profile across dataset. clearer visualization, plot exposure matrix cluster separately. clusters argument used specify cluster plot.  exposure plot cluster G0 (n=272), dominant mutational signatures SBS2 SBS13, along DBS11, DBS13, DBSD2 (mapped DBS2 COSMIC). signatures associated APOBEC enzyme activity. APOBEC-driven mutational processes frequently observed HER2-positive breast cancers, suggesting strong link cluster HER2-driven tumorigenesis.  cluster G1 (n=2058) exposure plot, largest among , shows strong presence SBS3, SBSD11 (mapped SBS8 Degasperi et al.), DBSD2 (mapped DBS2 COSMIC) DBS13. SBS3 DBS13 caused homologous recombination deficiency (HRD); DBS2, instead, linked smoking cancers often observed also cancers directly linked tobacco exposure. Based prevalent signatures, cluster G1 can associated triple-negative breast cancers. Clusters G10 (n=169), G11 (n=69), G13 (n=114) share similar SBS patterns, including exposure SBS1, SBS2, SBS3, SBS11, SBS13, pointing mix APOBEC activity, HRD, ageing-related mutational processes. BASCULE can differentiate three clusters based DBS exposure.  Cluster G10 notably associated mutational signatures DBSD2 (mapped DBS2 COSMIC) DBS11. signatures linked activity APOBEC enzyme family. strong link G10 signatures suggests APOBEC activity may driving factor behind mutational processes cluster.  cluster G11 smallest cluster primarily exposed DBSD1 (mapped DBS14 COSMIC), signature reported artifactual COSMIC. However, presence DBS13 G11, suggests cluster also linked homologous recombination deficiency (HRD).  Cluster G13 shows significant exposure mutational signatures DBS13 DBS20. particular signatures associated homologous recombination deficiency (HRD)-related processes. presence DBS13 DBS20 cluster G13 suggests samples group may influenced similar underlying genomic instability repair deficiencies.","code":"plot_exposures(x, clusters=c(\"G0\")) plot_exposures(x, clusters=c(\"G1\")) plot_exposures(x, clusters=c(\"G10\")) plot_exposures(x, clusters=c(\"G11\")) plot_exposures(x, clusters=c(\"G13\"))"},{"path":"https:://caravagnalab.github.io/bascule/articles/3.Survival_Analysis.html","id":"load-package","dir":"Articles","previous_headings":"","what":"Load package","title":"Survival analysis on a skin cancer cohort","text":"","code":"library(dplyr) library(survival) library(survminer) library(forestmodel) library(bascule)"},{"path":"https:://caravagnalab.github.io/bascule/articles/3.Survival_Analysis.html","id":"load-bascule-fit-object-and-clinical-metadata","dir":"Articles","previous_headings":"","what":"Load BASCULE fit object and clinical metadata","title":"Survival analysis on a skin cancer cohort","text":"utilized fit object skin cancer dataset International Cancer Genome Consortium (ICGC) cohort, readily available within package can loaded using command data(\"skin_fit\"). Subsequent post-processing involved merging related clusters mapping de novo inferred mutational signatures predefined set known signatures COSMIC (Catalogue Somatic Mutations Cancer) database Degasperi et al. study. Clinical metadata corresponding skin cancer cohort imported using data(\"skin_clinical\") matched genomic data based unique patient identifiers. clinical metadata includes following variables: PATIENT: Unique patient identifier (ID) TISSUE: Cancerous tissue type GENDER: Biological sex patient OS_STATUS: Overall survival status (alive deceased) OS_YEARS: Time event (measured duration death, applicable) CLUSTER: Cluster assignment determined BASCULE algorithm AGE: Age patient diagnosis defined function called sync_metadata gets BASCULE object corresponding clinical metadata input orchestrate merge files based patients IDs.","code":"data(\"skin_fit\")  x_orig = merge_clusters(skin_fit, cutoff=0.9) x = convert_dn_names(x_orig, reference_cat=list(SBS=Degasperi_SBS), cutoff=0.8) x = convert_dn_names(x, reference_cat=list(SBS=COSMIC_sbs_filt), cutoff=0.8) data(\"skin_metadata\")  sync_metadata = function(x, clinical_data) {   exp = get_exposure(x, add_groups=TRUE)[[\"SBS\"]] %>%      group_by(clusters) %>%     filter((n_distinct(samples)>=20), value>0) %>%   # keep only clusters with 20 or more members     ungroup()      clusters_list = exp %>% pull(clusters) %>% unique     samples_list = intersect(     x = unique(exp$samples),      y = clinical_data %>% filter(TISSUE==\"Skin\") %>% pull(PATIENT) %>% unique   )      clinical_data = clinical_data %>% filter(PATIENT %in% samples_list)   exp = exp %>% filter(samples %in% samples_list)      cluster_assignment = exp %>% select(samples, clusters) %>% distinct # get unique sample-cluster assignment   df = merge(x=clinical_data, y=cluster_assignment, by.x=\"PATIENT\", by.y=\"samples\", all.x=TRUE) # merge with clinical data    df$GENDER = as.factor(df$GENDER)      df$OS_STATUS = ifelse(df$OS_STATUS==\"DECEASED\", 1, 0)      names(df)[names(df)==\"clusters\"] = \"CLUSTER\"   df$CLUSTER = as.factor(df$CLUSTER)      df = df %>% mutate(AGE_GROUP = ifelse(df$AGE>median(df$AGE), \"old\", \"young\"))   df$AGE_GROUP = as.factor(df$AGE_GROUP)      df = df %>% filter(!is.na(CLUSTER))      return(list(\"exp\"=exp, \"df\"=df, \"cls\"=clusters_list)) }  obj = sync_metadata(x, skin_metadata) exp = obj$exp # exposure matrix in long format (removed clusters with less than 20 samples) df = obj$df # clinical data (samples from clinical data are mapped with samples from samples from bascule object) df = df %>% select(-AGE) %>% rename(AGE=AGE_GROUP) # remove age column from metadata"},{"path":"https:://caravagnalab.github.io/bascule/articles/3.Survival_Analysis.html","id":"exploratory-analysis-exposures-and-de-novo-signatures","dir":"Articles","previous_headings":"","what":"Exploratory analysis (exposures and de novo signatures)","title":"Survival analysis on a skin cancer cohort","text":"Analysing n=259 samples, two clusters (samples belonging clusters less equal 20 members eliminated) 10 mutational signatures, include eight established signatures SBS1, SBS3, SBS5, SBS7a, SBS7c, SBS7d, SBS18 SBS137 COSMIC Degasperi study, alongside two de novo signatures SBSD4 SBSD8 detected using BASCULE framework. Cluster G1, comprising smaller subset samples (n=37), exhibits heterogeneous mutational profile, predominantly enriched age-related signatures SBS1 SBS5, along SBS3 SBS18 associated homologous recombination deficiency damage reactive oxygen species. distinct mutational composition suggests etiology diverges canonical ultraviolet (UV) damage pathway. Additionally, SBSD8 contributes mutational landscape cluster G1, samples displaying elevated proportions signatures. contrast, cluster G11, encompassing majority samples (n=190), primarily characterized SBS7 family (SBS7a, SBS7c SBS7d), strongly indicative UV-induced mutagenesis, aligning well-established role UV exposure pathogenesis skin cancers melanoma. Notably, signature SBS137 (Degasperi catalogue), currently unknown aetiology, present, contribution de novo signature SBSD4 pronounced G11 G1. presence novel signatures SBSD4 SBSD8 identified via BASCULE suggests existence previously uncharacterised mutagenic processes within cohort.","code":"plot_exposures(x, clusters=c(\"G1\", \"G11\")) plot_signatures(x, signames=get_denovo_signames(x))"},{"path":"https:://caravagnalab.github.io/bascule/articles/3.Survival_Analysis.html","id":"kaplan-meier-analysis","dir":"Articles","previous_headings":"","what":"Kaplan-Meier analysis","title":"Survival analysis on a skin cancer cohort","text":"study n=259 skin cancer samples, identified ten mutational signatures within two clusters, including known established signatures like SBS1 (clock-like), SBS5 (clock-like) SBS7 family (UV-light). Kaplan-Meier survival analysis revealed distinct survival trends clusters (log-rank p=0.033). Cluster G11, enriched SBS7 signatures, exhibited better survival compared G1.","code":"fit = survfit(Surv(time=df$OS_YEARS, event=df$OS_STATUS) ~ CLUSTER, data=df)  ggsurvplot(   fit=fit,    data=df,    size=1,    pval=TRUE, # show log-rank test p-value   risk.table=TRUE, # add risk table below plot   risk.table.col='strata',    legend.labs=c(\"G1\", \"G11\"),    title=\"Kaplan-Meier Survival Curves\",    xlab=\"Time (Years)\",    ylab=\"Survival Probability\",    legend.title=\"Cluster\",    pval.size=3,    fontsize=4,    ggtheme=theme_bw() )"},{"path":"https:://caravagnalab.github.io/bascule/articles/3.Survival_Analysis.html","id":"cox-proportional-hazards-analysis","dir":"Articles","previous_headings":"","what":"Cox proportional hazards analysis","title":"Survival analysis on a skin cancer cohort","text":"multivariate Cox regression, G1 reference due lowest survival outcomes, cluster G11 showed trend toward protective effect (n=190, hazard ratio=0.63, 95% CI: 0.39-1.02, p=0.059). finding however borderline significant, possibly effect age significantly influenced hazard: younger patients experienced 44% reduction risk relative older individuals (n=114, hazard ratio=0.56, 95% CI: 0.40-0.80, p=0.001), whereas gender significantly affect outcome.","code":"format = forest_model_format_options(     colour=\"black\",     color=NULL,     shape=15,     text_size=5,     point_size=6,     banded=TRUE   ) cox_model = coxph(Surv(time=OS_YEARS, event=OS_STATUS) ~ GENDER + CLUSTER + AGE, data=df) forest_model(cox_model, format_options=format, factor_separate_line=T, recalculate_width=F, recalculate_height=T) +    labs(title=\"Cox proportional hazards model (forest plot)\") +    patchwork::plot_layout(axis_titles=\"collect\", axes=\"collect\")"},{"path":"https:://caravagnalab.github.io/bascule/articles/bascule.html","id":"installation-of-the-package","dir":"Articles","previous_headings":"","what":"Installation of the package","title":"bascule","text":"can install bascule GitHub using devtools. Load package.","code":"devtools::install_github(\"caravagnalab/bascule\") library(bascule)"},{"path":"https:://caravagnalab.github.io/bascule/articles/bascule.html","id":"python-dependencies-installation","dir":"Articles","previous_headings":"","what":"Python dependencies installation","title":"bascule","text":"package loaded, might execute configure_environment() function automatically check whether: version Anaconda Miniconda available, otherwise Miniconda installation started, conda environment loaded, package check bascule-env present, otherwise created, use existing conda environment, can loaded loading package, either reticulate function reticulate::use_condaenv() using bascule function load_conda_env(): eventually, required Python dependencies installed loaded environment, installed.","code":"reticulate::use_condaenv(\"env-name\", required=TRUE) load_conda_env(envname=\"env-name\")"},{"path":"https:://caravagnalab.github.io/bascule/articles/bascule.html","id":"functions-to-manually-configure-an-environment","dir":"Articles","previous_headings":"","what":"Functions to manually configure an environment","title":"bascule","text":"function configure_environment() can used interactively manually configure existing environment, create one scratch. function first check Anaconda Miniconda installation available, otherwise prompt Miniconda installation. input name environment either name existing environment name environment created. environment loaded created, required Python dependencies installed.","code":"configure_environment(env_name=\"bascule-env\", use_default=F)"},{"path":"https:://caravagnalab.github.io/bascule/articles/bascule.html","id":"check-the-loaded-python-version-and-environment","dir":"Articles","previous_headings":"","what":"Check the loaded Python version and environment","title":"bascule","text":"package provides also set helper functions check environment loaded. have_loaded_env() check environment already loaded, which_conda_env() check environment loaded. have_python_deps() check Python packages list installed specified environment. load_conda_env() load specified environment.","code":""},{"path":"https:://caravagnalab.github.io/bascule/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elena Buscaroli. Author, maintainer. Azad Sadr. Author, maintainer. Giulio Caravagna. Author.","code":""},{"path":"https:://caravagnalab.github.io/bascule/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buscaroli E, Sadr , Caravagna G (2025). bascule: bascule. R package version 1.0.0, https://github.com/caravagnalab/bascule.","code":"@Manual{,   title = {bascule: bascule},   author = {Elena Buscaroli and Azad Sadr and Giulio Caravagna},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/caravagnalab/bascule}, }"},{"path":"https:://caravagnalab.github.io/bascule/index.html","id":"bascule-","dir":"","previous_headings":"","what":"bascule","title":"bascule","text":"BASCULE Bayesian model fit multiple signature types multiple patients, leveraging pre-existing catalogue known signatures COSMIC. BASCULE searches known signatures input catalogue well new signatures outside catalogue, accounting hidden structure input data (e.g., distinct tumour types). Moreover, bascule performs tensor clustering retrieve latent groups input cohort exposures multiple signature types jointly. model uses non-negative matrix factorisation variational inference implemented pybascule Python package.","code":""},{"path":"https:://caravagnalab.github.io/bascule/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"bascule","text":"use bascule, please cite: E. Buscaroli, . Sadr, R. Bergamin, S. Milite, E. N. Villegas Garcia, . Tasciotti, . Ansuini, D. Ramazzotti, N. Calonaci, G. Caravagna. Bayesian framework infer cluster mutational signatures leveraging prior biological knowledge. bioRxiv preprint, 2024.","code":""},{"path":[]},{"path":"https:://caravagnalab.github.io/bascule/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"bascule","text":"can install released version bascule GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"caravagnalab/bascule\")"},{"path":"https:://caravagnalab.github.io/bascule/index.html","id":"copyright-and-contacts","dir":"","previous_headings":"Installation","what":"Copyright and contacts","title":"bascule","text":"Elena Buscaroli, Azad Sadr, Giulio Caravagna. Cancer Data Science (CDS) Laboratory, University Trieste, Italy.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_cn.html","id":null,"dir":"Reference","previous_headings":"","what":"COSMIC catalogue for CN (version 3.4, GRCh37) — COSMIC_cn","title":"COSMIC catalogue for CN (version 3.4, GRCh37) — COSMIC_cn","text":"COSMIC catalogue CN (version 3.4, GRCh37)","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_cn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COSMIC catalogue for CN (version 3.4, GRCh37) — COSMIC_cn","text":"","code":"data(COSMIC_cn)"},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_cn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"COSMIC catalogue for CN (version 3.4, GRCh37) — COSMIC_cn","text":"object class data.frame 24 rows 48 columns.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_dbs.html","id":null,"dir":"Reference","previous_headings":"","what":"COSMIC catalogue for DBS (version 3.4, GRCh37) — COSMIC_dbs","title":"COSMIC catalogue for DBS (version 3.4, GRCh37) — COSMIC_dbs","text":"COSMIC catalogue DBS (version 3.4, GRCh37)","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_dbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COSMIC catalogue for DBS (version 3.4, GRCh37) — COSMIC_dbs","text":"","code":"data(COSMIC_dbs)"},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_dbs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"COSMIC catalogue for DBS (version 3.4, GRCh37) — COSMIC_dbs","text":"object class data.frame 20 rows 78 columns.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"COSMIC catalogue for Indels (version 3.4, GRCh37) — COSMIC_indels","title":"COSMIC catalogue for Indels (version 3.4, GRCh37) — COSMIC_indels","text":"COSMIC catalogue Indels (version 3.4, GRCh37)","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COSMIC catalogue for Indels (version 3.4, GRCh37) — COSMIC_indels","text":"","code":"data(COSMIC_indels)"},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_indels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"COSMIC catalogue for Indels (version 3.4, GRCh37) — COSMIC_indels","text":"object class data.frame 18 rows 83 columns.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_sbs.html","id":null,"dir":"Reference","previous_headings":"","what":"COSMIC catalogue for SBS (version 3.4, GRCh37) — COSMIC_sbs","title":"COSMIC catalogue for SBS (version 3.4, GRCh37) — COSMIC_sbs","text":"COSMIC catalogue SBS (version 3.4, GRCh37)","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_sbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COSMIC catalogue for SBS (version 3.4, GRCh37) — COSMIC_sbs","text":"","code":"data(COSMIC_sbs)"},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_sbs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"COSMIC catalogue for SBS (version 3.4, GRCh37) — COSMIC_sbs","text":"add","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_sbs_filt.html","id":null,"dir":"Reference","previous_headings":"","what":"COSMIC catalogue for SBS filtered (version 3.4, GRCh37) — COSMIC_sbs_filt","title":"COSMIC catalogue for SBS filtered (version 3.4, GRCh37) — COSMIC_sbs_filt","text":"Filtered version COSMIC catalogue. validated signatures present. signature (besides SBS5) contexts probability mass 0.02 set 0 probabilities re-normalized contexts.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_sbs_filt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COSMIC catalogue for SBS filtered (version 3.4, GRCh37) — COSMIC_sbs_filt","text":"","code":"data(COSMIC_sbs_filt)"},{"path":"https:://caravagnalab.github.io/bascule/reference/COSMIC_sbs_filt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"COSMIC catalogue for SBS filtered (version 3.4, GRCh37) — COSMIC_sbs_filt","text":"add","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/Degasperi_DBS.html","id":null,"dir":"Reference","previous_headings":"","what":"Degasperi DBS catalogue — Degasperi_DBS","title":"Degasperi DBS catalogue — Degasperi_DBS","text":"DBS signatures extracted released \"Substitution mutational signatures whole-genome–sequenced cancers UK population.\" Degasperi et al.Science 376, Issue 6591, 2022. PMID: 35949260","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/Degasperi_DBS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degasperi DBS catalogue — Degasperi_DBS","text":"","code":"data(Degasperi_DBS)"},{"path":"https:://caravagnalab.github.io/bascule/reference/Degasperi_DBS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Degasperi DBS catalogue — Degasperi_DBS","text":"object class data.frame 39 rows 78 columns.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/Degasperi_SBS.html","id":null,"dir":"Reference","previous_headings":"","what":"Degasperi SBS catalogue — Degasperi_SBS","title":"Degasperi SBS catalogue — Degasperi_SBS","text":"SBS signatures extracted released \"Substitution mutational signatures whole-genome–sequenced cancers UK population.\" Degasperi et al.Science 376, Issue 6591, 2022. PMID: 35949260","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/Degasperi_SBS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degasperi SBS catalogue — Degasperi_SBS","text":"","code":"data(Degasperi_SBS)"},{"path":"https:://caravagnalab.github.io/bascule/reference/Degasperi_SBS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Degasperi SBS catalogue — Degasperi_SBS","text":"object class data.frame 120 rows 96 columns.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/bascule-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bascule: bascule — bascule-package","title":"bascule: bascule — bascule-package","text":"packages provides bascule (Bayesian inference clustering mutational signatures established catalogue) algorithm detect single-nucleotide substituion signatures cancer. bascule provides full Bayesian formulation based non-negative matrix factorisation, leveraging catalogue known signatures. tool specifically developed detect de novo mutational signatures type (SBS, DBS, IDS, ...) different pre-defined reference catalogue perform clustering samples signature types jointly.","code":""},{"path":[]},{"path":"https:://caravagnalab.github.io/bascule/reference/bascule-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bascule: bascule — bascule-package","text":"Maintainer: Elena Buscaroli ele.buscaroli@gmail.com Authors: Giulio Caravagna gcaravagn@gmail.com","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/breast_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of breast tumours — breast_data","title":"Analysis of breast tumours — breast_data","text":"Input SBS DBS counts BASCULE fits 2682 breast tumours released \"Substitution mutational signatures whole-genome–sequenced cancers UK population.\" Degasperi et al.Science 376, Issue 6591, 2022. PMID: 35949260","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/breast_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of breast tumours — breast_data","text":"","code":"data(breast_data)"},{"path":"https:://caravagnalab.github.io/bascule/reference/breast_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Analysis of breast tumours — breast_data","text":"object class list length 2.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/configure_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure the reticulate environment — configure_environment","title":"Configure the reticulate environment — configure_environment","text":"Function configure Python dependencies R. Python environment available, function check version conda miniconda, otherwise install miniconda, install Python package pybascule.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/configure_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure the reticulate environment — configure_environment","text":"","code":"configure_environment(envname = \"bascule-env\", use_default = FALSE)"},{"path":"https:://caravagnalab.github.io/bascule/reference/configure_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure the reticulate environment — configure_environment","text":"env_name name conda environment use, available.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/convert_dn_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to map de novo signatures to input catalogues — convert_dn_names","title":"Function to map de novo signatures to input catalogues — convert_dn_names","text":"Function map de novo signatures input catalogues","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/convert_dn_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to map de novo signatures to input catalogues — convert_dn_names","text":"","code":"convert_dn_names(x, x.simul = NULL, reference_cat = NULL, cutoff = 0.8)"},{"path":"https:://caravagnalab.github.io/bascule/reference/convert_dn_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to map de novo signatures to input catalogues — convert_dn_names","text":"x Object class \"bascule_obj\" x.simul Another object class \"bascule_obj\". present, `x` de novo signatures mapped `x_simul` ones reference_cat List reference catalogues. `NULL`, `x` de novo signatures mapped catalogues. cutoff Threshold cosine similarity.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/convert_dn_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to map de novo signatures to input catalogues — convert_dn_names","text":"Modified version `x` mapped de novo names renamed.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a bascule object — fit","title":"Fit a bascule object — fit","text":"Fit bascule object","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a bascule object — fit","text":"","code":"fit(   counts,   k_list,   cluster = NULL,   reference_cat = list(SBS = COSMIC_filt, DBS = COSMIC_dbs),   keep_sigs = c(\"SBS1\", \"SBS5\"),   hyperparameters = NULL,   lr = 0.005,   optim_gamma = 0.1,   n_steps = 3000,   py = NULL,   enumer = \"parallel\",   nonparametric = TRUE,   autoguide = FALSE,   filter_dn = FALSE,   min_exposure = 0.2,   CUDA = TRUE,   compile = FALSE,   store_parameters = FALSE,   store_fits = TRUE,   seed_list = c(10) )"},{"path":"https:://caravagnalab.github.io/bascule/reference/fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a bascule object — fit","text":"counts List mutation counts matrices multiple variant types. k_list List number denovo signatures test. cluster Maximum number clusters. `NULL`, clustering performed. reference_cat List reference catalogues use NMF. Names must input counts. keep_sigs List reference signatures keep even found low exposures. hyperparameters List hyperparameters passed NMF clustering models. lr Learning rate used SVI. optim_gamma Deprecated n_steps Number iterations inference. py User-installed version pybascule package enumer Enumeration used clustering (either `parallel` `sequential`). nonparametric Deprecated. model works nonparametric way. autoguide Logical. `TRUE`, clustering model use Pyro autoguide. filter_dn Logical. `TRUE`, contexts 0.01 denovo signatures set 0, provided filtered signatures remain consistent inferred ones. min_exposure Reference signatures exposures lower `min_exposure` dropped. CUDA Logical. `TRUE` GPU available, models run GPU. compile Deprecated. store_parameters Logical. `TRUE`, parameters every step inference stored object. store_fits Logical. `TRUE`, tested fits, .e., every value `K`, stored object. seed_list List seeds used every input configuration.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a bascule object — fit","text":"Bascule object.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/fit_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit clustering — fit_clustering","title":"Fit clustering — fit_clustering","text":"Fit clustering","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/fit_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit clustering — fit_clustering","text":"","code":"fit_clustering(   x,   cluster,   hyperparameters = NULL,   lr = 0.005,   optim_gamma = 0.1,   n_steps = 3000,   py = NULL,   enumer = \"parallel\",   nonparametric = TRUE,   autoguide = TRUE,   CUDA = TRUE,   compile = FALSE,   store_parameters = FALSE,   store_fits = TRUE,   seed_list = c(10) )"},{"path":"https:://caravagnalab.github.io/bascule/reference/fit_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit clustering — fit_clustering","text":"x Bascule object signatures deconvolution performed. cluster Maximum number clusters. hyperparameters List hyperparameters passed NMF clustering models. lr Learning rate SVI optimizer. optim_gamma Deprecated. n_steps Number steps inference. py User-installed version pybascule package enumer Enumeration used clustering (either `parallel` `sequential`). nonparametric Deprecated. model works nonparametric way. autoguide Logical. `TRUE`, clustering model use Pyro autoguide. CUDA Logical. `TRUE` GPU available, models run GPU. compile Deprecated. store_parameters Logical. `TRUE`, parameters every step inference stored object. store_fits Logical. `TRUE`, tested fits, .e., every value `K`, stored object. seed_list List seeds used every input configuration.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/fit_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit clustering — fit_clustering","text":"Bascule object.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_denovo_signames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get denovo signatures names — get_denovo_signames","title":"Get denovo signatures names — get_denovo_signames","text":"Get denovo signatures names","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_denovo_signames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get denovo signatures names — get_denovo_signames","text":"","code":"get_denovo_signames(x, types = get_types(x))"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_denovo_signames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get denovo signatures names — get_denovo_signames","text":"x bascule object. types List variant types retrieve signames .","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_denovo_signames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get denovo signatures names — get_denovo_signames","text":"list de novo signature names names equal `types`.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_denovo_signatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Get de novo (reference) signatures — get_denovo_signatures","title":"Get de novo (reference) signatures — get_denovo_signatures","text":"Get de novo (reference) signatures","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_denovo_signatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get de novo (reference) signatures — get_denovo_signatures","text":"","code":"get_denovo_signatures(x, types = get_types(x), matrix = FALSE)"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_denovo_signatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get de novo (reference) signatures — get_denovo_signatures","text":"x bascule object. types List variant types retrieve signames . matrix Logical. `TRUE`, return signatures wide format.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_denovo_signatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get de novo (reference) signatures — get_denovo_signatures","text":"De novo signature matrix long wide format names names equal `types`.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Get exposures — get_exposure","title":"Get exposures — get_exposure","text":"Get exposures","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get exposures — get_exposure","text":"","code":"get_exposure(   x,   types = get_types(x),   samples = get_samples(x),   clusters = get_cluster_labels(x),   add_groups = FALSE,   matrix = FALSE )"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get exposures — get_exposure","text":"x bascule object. types List variant types retrieve signames . samples List samples report exposures . clusters List cluster labels report exposures . add_groups Logical. `TRUE` add column sample's group label. matrix Logical. `TRUE`, return signatures wide format.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get exposures — get_exposure","text":"Exposures matrix long wide format names names equal `types`.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_fixed_signames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get reference signatures names — get_fixed_signames","title":"Get reference signatures names — get_fixed_signames","text":"Get reference signatures names","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_fixed_signames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get reference signatures names — get_fixed_signames","text":"","code":"get_fixed_signames(x, types = get_types(x))"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_fixed_signames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get reference signatures names — get_fixed_signames","text":"x bascule object. types List variant types retrieve signames .","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_fixed_signames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get reference signatures names — get_fixed_signames","text":"list reference signature names names equal `types`.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_fixed_signatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fixed (reference) signatures — get_fixed_signatures","title":"Get fixed (reference) signatures — get_fixed_signatures","text":"Get fixed (reference) signatures","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_fixed_signatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fixed (reference) signatures — get_fixed_signatures","text":"","code":"get_fixed_signatures(x, types = get_types(x), matrix = FALSE)"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_fixed_signatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fixed (reference) signatures — get_fixed_signatures","text":"x bascule object. types List variant types retrieve signames . matrix Logical. `TRUE`, return signatures wide format.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_fixed_signatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fixed (reference) signatures — get_fixed_signatures","text":"Reference signature matrix long wide format names names equal `types`.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Get input data — get_input","title":"Get input data — get_input","text":"Get input data","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get input data — get_input","text":"","code":"get_input(   x,   types = get_types(x),   samples = get_samples(x),   clusters = get_cluster_labels(x),   matrix = FALSE,   reconstructed = FALSE,   add_groups = FALSE,   by_sigs = FALSE )"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get input data — get_input","text":"x bascule object. types List variant types subset samples List samples subset clusters List clusters subset matrix Logical. `TRUE`, output wide format. reconstructed Logical. `TRUE`, reconstructed counts, .e., computed alpha x beta, returned. add_groups Logical. `TRUE` clustering performed, sample annotated assigned group. by_sigs Logical. `TRUE`, number mutations generated signature returned.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get input data — get_input","text":"list long wide-formatted mutations counts.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_n_denovo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of de novo signatures — get_n_denovo","title":"Get number of de novo signatures — get_n_denovo","text":"Get number de novo signatures","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_n_denovo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of de novo signatures — get_n_denovo","text":"","code":"get_n_denovo(x)"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_n_denovo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of de novo signatures — get_n_denovo","text":"x bascule object","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_n_denovo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of de novo signatures — get_n_denovo","text":"list integer number de novo signatures signature type","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_n_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of groups — get_n_groups","title":"Get number of groups — get_n_groups","text":"Get number groups","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_n_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of groups — get_n_groups","text":"","code":"get_n_groups(x)"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_n_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of groups — get_n_groups","text":"x bascule object","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_n_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of groups — get_n_groups","text":"integer number groups","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_signames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get signatures names — get_signames","title":"Get signatures names — get_signames","text":"Get signatures names","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_signames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get signatures names — get_signames","text":"","code":"get_signames(x, types = get_types(x))"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_signames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get signatures names — get_signames","text":"x bascule object. types List variant types retrieve signames .","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_signames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get signatures names — get_signames","text":"list signature names names equal `types`.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_signatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Get signatures — get_signatures","title":"Get signatures — get_signatures","text":"Get signatures","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_signatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get signatures — get_signatures","text":"","code":"get_signatures(x, types = get_types(x), matrix = FALSE)"},{"path":"https:://caravagnalab.github.io/bascule/reference/get_signatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get signatures — get_signatures","text":"x bascule object. types List variant types retrieve signames . matrix Logical. `TRUE`, return signatures wide format.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/get_signatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get signatures — get_signatures","text":"Signature matrix long wide format names names equal `types`.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/have_loaded_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if there is a loaded conda environment. — have_loaded_env","title":"Check if there is a loaded conda environment. — have_loaded_env","text":"Function check conda environment already loaded.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/have_loaded_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if there is a loaded conda environment. — have_loaded_env","text":"","code":"have_loaded_env()"},{"path":"https:://caravagnalab.github.io/bascule/reference/have_loaded_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if there is a loaded conda environment. — have_loaded_env","text":"Boolean, TRUE environment loaded, FALSE otherwise.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/have_python_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Python packages are installed in the environment. — have_python_deps","title":"Check if Python packages are installed in the environment. — have_python_deps","text":"Function check one Python packages present conda environment.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/have_python_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Python packages are installed in the environment. — have_python_deps","text":"","code":"have_python_deps(envname = \"\", py_pkgs = c(\"pybascule\"))"},{"path":"https:://caravagnalab.github.io/bascule/reference/have_python_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Python packages are installed in the environment. — have_python_deps","text":"envname name environment check. empty, function check currently loaded environment. py_pkgs list vector Python packages.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/have_python_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Python packages are installed in the environment. — have_python_deps","text":"list Boolean. input package, TRUE package installed, FALSE otherwise.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/load_conda_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the input conda environment. — load_conda_env","title":"Load the input conda environment. — load_conda_env","text":"Function load input conda environment. function raise error Python version already attached reticulate package. case, necessary restart R session load desired environment **** calling lineaGT function interfacing Python - filter_dataset() fit().","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/load_conda_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the input conda environment. — load_conda_env","text":"","code":"load_conda_env(envname = \"bascule-env\")"},{"path":"https:://caravagnalab.github.io/bascule/reference/merge_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to merge similar clusters — merge_clusters","title":"Function to merge similar clusters — merge_clusters","text":"function iteratively merge clusters result similar centroid. merging stop soon cosine similarity pairs clusters `cutoff`","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/merge_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to merge similar clusters — merge_clusters","text":"","code":"merge_clusters(x, cutoff = 0.8)"},{"path":"https:://caravagnalab.github.io/bascule/reference/merge_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to merge similar clusters — merge_clusters","text":"x bascule object. cutoff Minimum value similarity merge two clusters.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/merge_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to merge similar clusters — merge_clusters","text":"bascule object.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot.bascule_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot for class 'bascule_obj'. — plot.bascule_obj","title":"Plot for class 'bascule_obj'. — plot.bascule_obj","text":"default plot CNA segments wide format","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot.bascule_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot for class 'bascule_obj'. — plot.bascule_obj","text":"","code":"# S3 method for class 'bascule_obj' plot(x, ...)"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot.bascule_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot for class 'bascule_obj'. — plot.bascule_obj","text":"x obj class 'bascule_obj'. ... Default S3 method parameter.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot.bascule_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot for class 'bascule_obj'. — plot.bascule_obj","text":"Nothing.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clustering centroids — plot_centroids","title":"Plot clustering centroids — plot_centroids","text":"Plot clustering centroids","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clustering centroids — plot_centroids","text":"","code":"plot_centroids(   x,   types = get_types(x),   clusters = get_cluster_labels(x),   cls = NULL,   sort_by = NULL,   exposure_thr = 0,   quantile_thr = 0,   signatures_list = get_signames(x),   ... )"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_centroids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clustering centroids — plot_centroids","text":"x bascule object. types List variant types visualize. clusters List clusters visualize. cls Custom color palette signatures. sort_by Signature sort patients' exposures . exposure_thr signatures exposures greater `exposure_thr` samples highlighted. quantile_thr add signatures_list add ... Additional arguments","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_centroids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clustering centroids — plot_centroids","text":"ggplot object.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize the input and reconstructed mutation counts. — plot_data","title":"Function to visualize the input and reconstructed mutation counts. — plot_data","text":"Function visualize input reconstructed mutation counts.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize the input and reconstructed mutation counts. — plot_data","text":"","code":"plot_data(   x,   types = get_types(x),   samples = get_samples(x),   clusters = get_cluster_labels(x),   reconstructed = TRUE,   color_by_sigs = FALSE,   plot_by_sample = FALSE )"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize the input and reconstructed mutation counts. — plot_data","text":"x bascule object. types List variant types visualize. samples List samples visualize. clusters List clusters visualize. reconstructed Logical. `TRUE`, reconstructed counts, .e., computed alpha x beta, visualized. color_by_sigs Logical. `TRUE`, context report number mutations split signature. plot_by_sample Logical. `TRUE`, function return list ggplot objects counts sample.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize the input and reconstructed mutation counts. — plot_data","text":"one list ggplot objects.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_exposures.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize the estimated exposures — plot_exposures","title":"Function to visualize the estimated exposures — plot_exposures","text":"Function visualize estimated exposures","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_exposures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize the estimated exposures — plot_exposures","text":"","code":"plot_exposures(   x,   types = get_types(x),   samples = get_samples(x),   clusters = get_cluster_labels(x),   sample_name = FALSE,   color_palette = NULL,   add_centroid = FALSE,   sort_by = NULL,   exposure_thr = 0,   quantile_thr = 0,   signatures_list = get_signames(x) )"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_exposures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize the estimated exposures — plot_exposures","text":"x bascule object. types List variant types visualize. samples List samples visualize. clusters List clusters visualize. sample_name Logical. `TRUE`, sample names reported x axis. color_palette Custom color palette signatures. add_centroid Logical. `TRUE`, also clustering's centroids plotted. sort_by Signature sort patients' exposures . exposure_thr signatures exposures greater `exposure_thr` samples highlighted. quantile_thr add signatures_list add","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_exposures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize the estimated exposures — plot_exposures","text":"ggplot object.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Report of the fit — plot_fit","title":"Report of the fit — plot_fit","text":"Report fit","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report of the fit — plot_fit","text":"","code":"plot_fit(x)"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report of the fit — plot_fit","text":"x Bascule object","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report of the fit — plot_fit","text":"assembled plots","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_gradient_norms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot parameters gradients norms — plot_gradient_norms","title":"Plot parameters gradients norms — plot_gradient_norms","text":"Visualise norms parameters gradients computed inference.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_gradient_norms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot parameters gradients norms — plot_gradient_norms","text":"","code":"plot_gradient_norms(x, types = get_types(x))"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_gradient_norms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot parameters gradients norms — plot_gradient_norms","text":"x bascule object. types List types visualise gradient norms .","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_gradient_norms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot parameters gradients norms — plot_gradient_norms","text":"patchwork object","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_posterior_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot posterior probabilities — plot_posterior_probs","title":"Plot posterior probabilities — plot_posterior_probs","text":"Plot posterior probabilities assignments.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_posterior_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot posterior probabilities — plot_posterior_probs","text":"","code":"plot_posterior_probs(x, samples = get_samples(x))"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_posterior_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot posterior probabilities — plot_posterior_probs","text":"x bascule object samples List samples visualise.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_posterior_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot posterior probabilities — plot_posterior_probs","text":"ggplot object","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model selection scores — plot_scores","title":"Plot model selection scores — plot_scores","text":"Function plot model selection scores NMF variant type clustering. Reported scores BIC negative log-likelihood.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model selection scores — plot_scores","text":"","code":"plot_scores(x, types = get_types(x), remove_outliers = FALSE)"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model selection scores — plot_scores","text":"x bascule object. types List variant types visualize. remove_outliers Logical. `TRUE`, outliers score removed.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot model selection scores — plot_scores","text":"ggplot2 object.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_signatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize the estimated and reference signatures. — plot_signatures","title":"Function to visualize the estimated and reference signatures. — plot_signatures","text":"Function visualize estimated reference signatures.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_signatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize the estimated and reference signatures. — plot_signatures","text":"","code":"plot_signatures(   x,   types = get_types(x),   context = T,   cls = NULL,   signames = get_signames(x) )"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_signatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize the estimated and reference signatures. — plot_signatures","text":"x bascule object. types List variant types visualize. context Logical. `TRUE`, context names reported x axis. cls Custom color palette signatures. signames List signatures visualize.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_signatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize the estimated and reference signatures. — plot_signatures","text":"ggplot object.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_similarity_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualize the similarity of denovo and reference signatures. — plot_similarity_reference","title":"Function to visualize the similarity of denovo and reference signatures. — plot_similarity_reference","text":"Function visualize similarity denovo reference signatures.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_similarity_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualize the similarity of denovo and reference signatures. — plot_similarity_reference","text":"","code":"plot_similarity_reference(   x,   reference = NULL,   type = \"SBS\",   similarity_cutoff = 0.8,   context = T,   add_pheatmap = T )"},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_similarity_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualize the similarity of denovo and reference signatures. — plot_similarity_reference","text":"x Bascule object. reference External reference catalogue compare denovo . similarity_cutoff add context Logical. set TRUE, context labels reported x axis. add_pheatmap Logical. set TRUE, heatmap similarity values among signatures reported. by_subs Logical. set TRUE, similarity computed separately substitution.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/plot_similarity_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualize the similarity of denovo and reference signatures. — plot_similarity_reference","text":"add","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/print.bascule_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Print for class 'bascule_obj'. — print.bascule_obj","title":"Print for class 'bascule_obj'. — print.bascule_obj","text":"Print class 'bascule_obj'.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/print.bascule_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print for class 'bascule_obj'. — print.bascule_obj","text":"","code":"# S3 method for class 'bascule_obj' print(x, ...)"},{"path":"https:://caravagnalab.github.io/bascule/reference/print.bascule_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print for class 'bascule_obj'. — print.bascule_obj","text":"x obj class 'bascule_obj'. ... Default S3 method parameter.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/print.bascule_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print for class 'bascule_obj'. — print.bascule_obj","text":"Nothing.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/refine_denovo_signatures.html","id":null,"dir":"Reference","previous_headings":"","what":"De novo signatures refinement. — refine_denovo_signatures","title":"De novo signatures refinement. — refine_denovo_signatures","text":"Function refine inferred de novo signatures. function performs linear combination de novo reference signatures. de novo signature can explained linear combination one reference signatures, removed exposures distributed among similar signatures.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/refine_denovo_signatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"De novo signatures refinement. — refine_denovo_signatures","text":"","code":"refine_denovo_signatures(x, types = get_types(x))"},{"path":"https:://caravagnalab.github.io/bascule/reference/refine_denovo_signatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"De novo signatures refinement. — refine_denovo_signatures","text":"x bascule object. types List variant types perform de novo refinement .","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/refine_denovo_signatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"De novo signatures refinement. — refine_denovo_signatures","text":"bascule object.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/skin_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Skin cohort BASCULE fit — skin_fit","title":"Skin cohort BASCULE fit — skin_fit","text":"BASCULE fit skin cohort data used survival analysis.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/skin_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skin cohort BASCULE fit — skin_fit","text":"","code":"data(skin_fit)"},{"path":"https:://caravagnalab.github.io/bascule/reference/skin_fit.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Skin cohort BASCULE fit — skin_fit","text":"object class bascule_obj length 3.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/skin_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Skin cohort metadata — skin_metadata","title":"Skin cohort metadata — skin_metadata","text":"Clinical data skin cancer cohort used survival analysis.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/skin_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skin cohort metadata — skin_metadata","text":"","code":"data(skin_metadata)"},{"path":"https:://caravagnalab.github.io/bascule/reference/skin_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Skin cohort metadata — skin_metadata","text":"object class data.frame 1832 rows 7 columns.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/synthetic_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of a synthetic cohort — synthetic_data","title":"Analysis of a synthetic cohort — synthetic_data","text":"Input SBS DBS counts BASCULE fits cohort 150 samples whose counts exposures generated BASCULE generative model.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/synthetic_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of a synthetic cohort — synthetic_data","text":"","code":"data(synthetic_data)"},{"path":"https:://caravagnalab.github.io/bascule/reference/synthetic_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Analysis of a synthetic cohort — synthetic_data","text":"object class list length 3.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/which_conda_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the name of the currently loaded environment. — which_conda_env","title":"Retrieve the name of the currently loaded environment. — which_conda_env","text":"Function retrieve name currently loaded conda environment.","code":""},{"path":"https:://caravagnalab.github.io/bascule/reference/which_conda_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the name of the currently loaded environment. — which_conda_env","text":"","code":"which_conda_env()"},{"path":"https:://caravagnalab.github.io/bascule/reference/which_conda_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the name of the currently loaded environment. — which_conda_env","text":"character corresponding name loaded environment.","code":""}]
